#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1344517135.23668
__CHEETAH_genTimestamp__ = 'Thu Aug  9 13:58:55 2012'
__CHEETAH_src__ = 'template.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Aug  9 13:58:17 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class template(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(template, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<html>
    <head>
        <title>plexweb</title>
        <link rel="stylesheet" href="/plex/css/style.css" type="text/css">
    </head>
    <body leftmargin="0" marginwidth="0" topmargin="0" marginheight="0" offset="0">
        <center>
            <table border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="backgroundTable">
                <tr>
                    <td align="center" valign="center">
                        <br />
                        <table border="0" cellpadding="0" cellspacing="0" width="360" id="templateContainer">
                            <tr>
                                <td align="center" valign="top">
                                    <!-- // Begin Template Body \\\\ -->
                                    <table border="0" cellpadding="0" cellspacing="0" width="360" id="templateBody">
                                        <tr>
                                            <td valign="top" class="bodyContent">
                                
                                                <!-- // Begin Module: Standard Content \\\\ -->
                                                <table border="0" cellpadding="20" cellspacing="0" width="100%">
                                                    <tr>
                                                        <td valign="top">
                                                            <div mc:edit="std_content00">
                                                                <div id=controls>
                                                                    <a href="/plex/playback/stepBack">&lt&lt</a>
                                                                    <a href="/plex/playback/play">play/pause</a>
                                                                    <a href="/plex/playback/stop">stop</a>
                                                                    <a href="/plex/playback/stepForward">&gt&gt</a>
                                                                </div>
                                                        
                                                                <div id=title>
                                                                    <h1>''')
        _v = VFFSL(SL,"info.title",True) # u'$info.title' on line 33, col 73
        if _v is not None: write(_filter(_v, rawExpr=u'$info.title')) # from line 33, col 73.
        write(u'''</h1>
                                                                    <h2>''')
        _v = VFFSL(SL,"info.subtitle",True) # u'$info.subtitle' on line 34, col 73
        if _v is not None: write(_filter(_v, rawExpr=u'$info.subtitle')) # from line 34, col 73.
        write(u'''</h2>
                                                                </div>
                                                        
                                                                <div id=items>
                                                                    <ul>
''')
        for item in VFFSL(SL,"media",True): # generated from line 39, col 69
            if VFFSL(SL,"item.kind",True) == "show": # generated from line 40, col 73
                write(u'''                                                                        <li><a href="/plex/library/displayMedia?key=''')
                _v = VFFSL(SL,"item.key",True) # u'$item.key' on line 41, col 117
                if _v is not None: write(_filter(_v, rawExpr=u'$item.key')) # from line 41, col 117.
                write(u'''">''')
                _v = VFFSL(SL,"item.title",True) # u'$item.title' on line 41, col 128
                if _v is not None: write(_filter(_v, rawExpr=u'$item.title')) # from line 41, col 128.
                write(u'''</a></li>
''')
            elif VFFSL(SL,"item.kind",True) == "season": # generated from line 42, col 73
                write(u'''                                                                        <li><a href="/plex/library/displayMedia?key=''')
                _v = VFFSL(SL,"item.key",True) # u'$item.key' on line 43, col 117
                if _v is not None: write(_filter(_v, rawExpr=u'$item.key')) # from line 43, col 117.
                write(u'''">''')
                _v = VFFSL(SL,"item.title",True) # u'$item.title' on line 43, col 128
                if _v is not None: write(_filter(_v, rawExpr=u'$item.title')) # from line 43, col 128.
                write(u''' &#8211 ''')
                _v = VFFSL(SL,"item.numChildren",True) # u'$item.numChildren' on line 43, col 147
                if _v is not None: write(_filter(_v, rawExpr=u'$item.numChildren')) # from line 43, col 147.
                write(u''' Episodes</a></li>
''')
            elif VFFSL(SL,"item.kind",True) == "movie": # generated from line 44, col 73
                write(u'''                                                                        <li><a href="/plex/playMedia?key=''')
                _v = VFFSL(SL,"item.key",True) # u'$item.key' on line 45, col 106
                if _v is not None: write(_filter(_v, rawExpr=u'$item.key')) # from line 45, col 106.
                write(u'''">''')
                _v = VFFSL(SL,"item.title",True) # u'$item.title' on line 45, col 117
                if _v is not None: write(_filter(_v, rawExpr=u'$item.title')) # from line 45, col 117.
                write(u''' (''')
                _v = VFFSL(SL,"item.year",True) # u'$item.year' on line 45, col 130
                if _v is not None: write(_filter(_v, rawExpr=u'$item.year')) # from line 45, col 130.
                write(u''')</a></li>
''')
            elif VFFSL(SL,"item.kind",True) == "episode": # generated from line 46, col 73
                write(u'''                                                                        <li><a href="/plex/playMedia?key=''')
                _v = VFFSL(SL,"item.key",True) # u'$item.key' on line 47, col 106
                if _v is not None: write(_filter(_v, rawExpr=u'$item.key')) # from line 47, col 106.
                write(u'''">Episode ''')
                _v = VFFSL(SL,"item.number",True) # u'$item.number' on line 47, col 125
                if _v is not None: write(_filter(_v, rawExpr=u'$item.number')) # from line 47, col 125.
                write(u''' - ''')
                _v = VFFSL(SL,"item.title",True) # u'$item.title' on line 47, col 140
                if _v is not None: write(_filter(_v, rawExpr=u'$item.title')) # from line 47, col 140.
                write(u'''</a></li>
''')
            elif VFFSL(SL,"item.kind",True) == "directory": # generated from line 48, col 73
                write(u'''                                                                        <li><a href="/plex/library/displayMedia?key=''')
                _v = VFFSL(SL,"item.key",True) # u'$item.key' on line 49, col 117
                if _v is not None: write(_filter(_v, rawExpr=u'$item.key')) # from line 49, col 117.
                write(u'''">''')
                _v = VFFSL(SL,"item.title",True) # u'$item.title' on line 49, col 128
                if _v is not None: write(_filter(_v, rawExpr=u'$item.title')) # from line 49, col 128.
                write(u'''</a></li>
''')
        write(u'''                                                                    </ul>
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </table>
                                                <!-- // End Module: Standard Content \\\\ -->
                                                
                                            </td>
                                        </tr>
                                    </table>
                                    <!-- // End Template Body \\\\ -->
                                </td>
                            </tr>
                        </table>
                        <br />
                    </td>
                </tr>
            </table>
        </center>
    </body>
</html>''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_template= 'respond'

## END CLASS DEFINITION

if not hasattr(template, '_initCheetahAttributes'):
    templateAPIClass = getattr(template, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(template)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=template()).run()


